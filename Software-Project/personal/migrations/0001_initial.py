# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import datetime
import django.core.files.storage
import multiselectfield.db.fields
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Myuser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('role', models.IntegerField(verbose_name='*Student/Faculties Unique Id')),
                ('uid', models.CharField(max_length=5, verbose_name='*Role', choices=[(0, 'Student'), (1, 'Faculty'), (2, 'Admin'), (3, 'CAES Staff')])),
                ('user', models.OneToOneField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectModel',
            fields=[
                ('Id', models.AutoField(serialize=False, primary_key=True)),
                ('PF_First_Name', models.CharField(max_length=120, verbose_name='*First Name')),
                ('PF_Last_Name', models.CharField(max_length=120, verbose_name='*Last Name')),
                ('PF_Contact_Number', models.IntegerField(verbose_name='*Contact Number')),
                ('PF_Email', models.EmailField(max_length=254, verbose_name='*Email')),
                ('PF_Department', models.CharField(max_length=120, verbose_name='*Department', choices=[('None', 'None'), ('Aerospace', 'Aerospace Engineering'), ('Applied Mathematics', 'Applied Mathematics'), ('Architectural', 'Architectural Engineering'), ('Chemical', 'Chemical Engineering'), ('Biological', 'Biological Engineering'), ('Civil', 'Civil Engineering'), ('Computer Science', 'Computer Science'), ('Electrical', 'Electrical Engineering'), ('Electrical and Computer', 'Electrical and Computer Engineering'), ('Engineering Physics', 'Engineering Physics'), ('Environmental', 'Environmental Engineering'), ('Mechanical', 'Mechanical Engineering'), ('Technology Arts and Media', 'Technology Arts and Media')])),
                ('PF_Communities', models.CharField(max_length=120, verbose_name='*Does the project have focus on Engineering for developing communities?', choices=[('select1', 'Yes'), ('select2', 'No')])),
                ('SF_First_Name', models.CharField(max_length=120, verbose_name='Secondary Faculty, Firstname')),
                ('SF_Last_Name', models.CharField(max_length=120, verbose_name='Secondary Faculty, Lastname')),
                ('SF_Contact_Number', models.IntegerField(default=0, null=True, blank=True)),
                ('SF_Email', models.EmailField(max_length=254)),
                ('SF_Department', models.CharField(max_length=120, choices=[('None', 'None'), ('Aerospace', 'Aerospace Engineering'), ('Applied Mathematics', 'Applied Mathematics'), ('Architectural', 'Architectural Engineering'), ('Chemical', 'Chemical Engineering'), ('Biological', 'Biological Engineering'), ('Civil', 'Civil Engineering'), ('Computer Science', 'Computer Science'), ('Electrical', 'Electrical Engineering'), ('Electrical and Computer', 'Electrical and Computer Engineering'), ('Engineering Physics', 'Engineering Physics'), ('Environmental', 'Environmental Engineering'), ('Mechanical', 'Mechanical Engineering'), ('Technology Arts and Media', 'Technology Arts and Media')])),
                ('Appr_Title', models.CharField(max_length=120, verbose_name='*Apprenticeship Title')),
                ('Appr_Details', models.CharField(max_length=2000, verbose_name='*Project Details (in brief)')),
                ('Appr_Project_Link1', models.CharField(max_length=120, verbose_name='Link to Project Details')),
                ('Appr_Project_Link2', models.FileField(default='settings.MEDIA_ROOT/default/temp.txt', storage=django.core.files.storage.FileSystemStorage(location=b'./media'), upload_to='Apprenticeship')),
                ('Appr_Special_Requirements', models.CharField(max_length=1000, verbose_name='*Special skillset required')),
                ('Appr_Departments', multiselectfield.db.fields.MultiSelectField(max_length=120, verbose_name='*Choose one or more departments', choices=[('None', 'None'), ('Aerospace', 'Aerospace Engineering'), ('Applied Mathematics', 'Applied Mathematics'), ('Architectural', 'Architectural Engineering'), ('Chemical', 'Chemical Engineering'), ('Biological', 'Biological Engineering'), ('Civil', 'Civil Engineering'), ('Computer Science', 'Computer Science'), ('Electrical', 'Electrical Engineering'), ('Electrical and Computer', 'Electrical and Computer Engineering'), ('Engineering Physics', 'Engineering Physics'), ('Environmental', 'Environmental Engineering'), ('Mechanical', 'Mechanical Engineering'), ('Technology Arts and Media', 'Technology Arts and Media')])),
                ('Appr_Supervision_Level', models.CharField(max_length=180, verbose_name='*Supervision Level', choices=[('None', 'Very little supervision; student will need to work largely independently'), ('Moderate', 'Moderate amount of supervision and interaction with others'), ('A lot', 'Good deal of supervision; student will work as an integral part of a research team')])),
                ('Appr_Supervision_By', models.CharField(max_length=180, verbose_name='*Supervision By', choices=[('Faculty', 'Supervision primarily by faculty supervisor'), ('Graduate Student', 'Supervision primarily by graduate students'), ('Combination', 'Supervision primarily a combination of faculty and graduate students')])),
                ('Appr_Nature_Of_Work', models.CharField(max_length=180, verbose_name='*Nature of Work', choices=[('theoretical', 'Nature of work is primarily theoretical, most work on paper/electronic medium'), ('experimental', 'Nature of work is primarily experimental, requiring hands-on work in a lab'), ('field based', 'Nature of work is primarily field based, requiring hands-on work in the field'), ('computer-related', 'Nature of work is primarily computer-related, involving coding/analysis'), ('combination', 'Nature of work is a combination of several types of work')])),
                ('Appr_Prior_Work', models.CharField(max_length=180, verbose_name='*Prior Work on project', choices=[('None', 'No prior work; student will be starting from basic idea'), ('Some', 'Some prior work; student will build on work of others'), ('Well-established', 'Well-established body of work; student will refine/improved upon efforts of others')])),
                ('Min_GPA', models.FloatField(verbose_name='*GPA (Should be between 0 to 4)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(4.0)])),
                ('Requirement1', models.CharField(max_length=100, verbose_name='*Requirement I')),
                ('Requirement2', models.CharField(max_length=100, verbose_name='*Requirement II')),
                ('Requirement3', models.CharField(max_length=100, verbose_name='*Requirement III')),
                ('Username', models.CharField(max_length=180)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('First_Name', models.CharField(max_length=80, verbose_name='*First Name')),
                ('Last_Name', models.CharField(max_length=80, verbose_name='*Last Name')),
                ('Student_Id', models.IntegerField(serialize=False, verbose_name='*Student ID', primary_key=True)),
                ('Gender', models.CharField(max_length=25, choices=[('M', 'Male'), ('F', 'Female'), ('D', 'Do Not Wish to Provide')], verbose_name='*Gender', error_messages={'required': 'Please select a Gender type'})),
                ('Race', models.CharField(max_length=100, verbose_name='*Race', choices=[('None', 'None'), ('AI_AN', 'American Indian or Alaskan Native'), ('B_AA', 'Black or African-American'), ('NH_OPI', 'Native Hawaiian or other Pacific Islander'), ('A', 'Asian'), ('W', 'White'), ('O', 'Other'), ('DN', 'Do Not Wish to Provide')])),
                ('Address_Line_1', models.CharField(max_length=200, verbose_name='*Address1')),
                ('Address_Line_2', models.CharField(max_length=200, verbose_name='Address2')),
                ('City', models.CharField(max_length=80, verbose_name='*City')),
                ('State', models.CharField(max_length=25, choices=[('NN', ''), ('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], verbose_name='*State', error_messages={'required': 'Please select a State'})),
                ('Zip', models.CharField(max_length=5, verbose_name='*Zip')),
                ('Country', models.CharField(default='United States', max_length=80, verbose_name='*Country')),
                ('Phone', models.IntegerField(verbose_name='*Phone')),
                ('Email', models.EmailField(max_length=254, verbose_name='*Email')),
                ('SAddress_Line_1', models.CharField(max_length=200, verbose_name='*Summer Address1')),
                ('SAddress_Line_2', models.CharField(max_length=200, verbose_name='Summer Address2')),
                ('SCity', models.CharField(max_length=80, verbose_name='*Summer City')),
                ('SState', models.CharField(max_length=25, choices=[('NN', ''), ('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], verbose_name='*Summer State', error_messages={'required': 'Please select a State'})),
                ('SZip', models.CharField(max_length=5, verbose_name='*Summer Zip')),
                ('SCountry', models.CharField(default='United States', max_length=80, verbose_name='*Summer Country')),
                ('SPhone', models.IntegerField(null=True, verbose_name='*Summer Phone')),
                ('SEmail', models.EmailField(max_length=254, verbose_name='*Summer Email')),
                ('Enrollment', models.CharField(max_length=60, verbose_name='', choices=[('1', 'True'), ('0', 'False')])),
                ('Primary_Major', models.CharField(max_length=50, verbose_name='*Primary Major', choices=[('None', 'None'), ('Aerospace', 'Aerospace Engineering'), ('Applied Mathematics', 'Applied Mathematics'), ('Architectural', 'Architectural Engineering'), ('Chemical', 'Chemical Engineering'), ('Biological', 'Biological Engineering'), ('Civil', 'Civil Engineering'), ('Computer Science', 'Computer Science'), ('Electrical', 'Electrical Engineering'), ('Electrical and Computer', 'Electrical and Computer Engineering'), ('Engineering Physics', 'Engineering Physics'), ('Environmental', 'Environmental Engineering'), ('Mechanical', 'Mechanical Engineering'), ('Technology Arts and Media', 'Technology Arts and Media')])),
                ('GPA', models.FloatField(verbose_name='*GPA (Should be between 0 to 4)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(4.0)])),
                ('Secondary_Major', models.CharField(max_length=50, verbose_name='Secondary Major', choices=[('None', 'None'), ('Aerospace', 'Aerospace Engineering'), ('Applied Mathematics', 'Applied Mathematics'), ('Architectural', 'Architectural Engineering'), ('Chemical', 'Chemical Engineering'), ('Biological', 'Biological Engineering'), ('Civil', 'Civil Engineering'), ('Computer Science', 'Computer Science'), ('Electrical', 'Electrical Engineering'), ('Electrical and Computer', 'Electrical and Computer Engineering'), ('Engineering Physics', 'Engineering Physics'), ('Environmental', 'Environmental Engineering'), ('Mechanical', 'Mechanical Engineering'), ('Technology Arts and Media', 'Technology Arts and Media')])),
                ('Degree_Level', models.CharField(max_length=50, verbose_name='What degree are you pursuing?', choices=[('BS', 'BS'), ('MS', 'MS')])),
                ('Level', models.CharField(max_length=50, verbose_name='*Level in school as of next fall', choices=[('F', 'Freshman'), ('SO', 'Sophomore'), ('J', 'Junior'), ('SE', 'Senior'), ('FSE', '5th Year Senior')])),
                ('Anticipated_Graduation', models.DateField(default=datetime.datetime.now, verbose_name='*Anticipated Graduation Date')),
                ('Previous_Research', models.CharField(max_length=20, verbose_name='Do you have previous research experience?', choices=[('1', 'True'), ('0', 'False')])),
                ('Availability', models.CharField(max_length=60, verbose_name='', choices=[('1', 'True'), ('0', 'False')])),
                ('Applied_Before', models.CharField(max_length=20, verbose_name='*Have you applied for Discovery Learning Apprenticeship before?', choices=[('1', 'True'), ('0', 'False')])),
                ('Got_DLA_Before', models.CharField(max_length=50, verbose_name='Have you worked for DLA before?', choices=[('1', 'True'), ('0', 'False')])),
                ('First_Preference', models.CharField(max_length=200, verbose_name='*First Preference')),
                ('Two_Preference', models.CharField(max_length=200, verbose_name='Two Preference')),
                ('Three_Preference', models.CharField(max_length=200, verbose_name='Three Preference')),
                ('Four_Preference', models.CharField(max_length=200, verbose_name='Four Preference')),
                ('Five_Preference', models.CharField(max_length=200, verbose_name='Five Preference')),
                ('Background_check', models.CharField(max_length=50, choices=[('1', 'True'), ('0', 'False'), ('2', 'Not Sure')])),
                ('Discrimination_training', models.CharField(max_length=50, choices=[('1', 'True'), ('0', 'False'), ('2', 'Not Sure')])),
                ('SSN', models.IntegerField(verbose_name='*Last four digits of your Social Security Number: (this will only be used to acess your background check information)')),
                ('Skills', models.CharField(max_length=300, verbose_name='Please list the three skills or qualifications that you feel make you a great candidate for the positions you selected. (Could be knowledge of a programming language, knowledge of a field, courses taken, personal characteristics, etc. If appropriate, note your match to requirements in job description. Please note responses are limited to 75 characters.)')),
                ('Skills_1', models.CharField(max_length=100, verbose_name='1. ')),
                ('Skills_2', models.CharField(max_length=100, verbose_name='2. ')),
                ('Skills_3', models.CharField(max_length=100, verbose_name='3. ')),
                ('P1_Req1', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P1_Req2', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P1_Req3', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P2_Req1', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P2_Req2', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P2_Req3', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P3_Req1', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P3_Req2', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P3_Req3', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P4_Req1', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P4_Req2', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P4_Req3', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P5_Req1', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P5_Req2', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('P5_Req3', models.CharField(default=False, max_length=50, verbose_name='Title Req1', choices=[('1', 'True'), ('0', 'False')])),
                ('Project_selected_for', models.IntegerField(default=0, verbose_name='Project ID')),
                ('Upload', models.CharField(max_length=100)),
            ],
        ),
    ]
